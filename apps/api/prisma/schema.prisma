// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chatParticipants ChatParticipant[]
  messages  Message[]
  apiKeys   ApiKey[]
  failedLoginAttempts FailedLoginAttempt[]
  auditLogs AuditLog[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  title       String
  description String?
  isPublic   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants ChatParticipant[]
  messages    Message[]

  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(cuid())
  userId    String
  chatId    String
  role      ChatRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  chatId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model FailedLoginAttempt {
  id          String   @id @default(cuid())
  userId      String
  attempts    Int      @default(1)
  lastAttempt DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("failed_login_attempts")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  eventType   String   // Will be mapped to AuditEventType enum
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ChatRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
